# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven & generate soanr report
      run: mvn -B package --file pom.xml
    - name: sonar report 
      run: mvn sonar:sonar --file pom.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_URL:  ${{ secrets.SONAR_URL }}
    - name: docker build
      run: |
        #sudo apt-get update -y && sudo apt-get install trivy -y
        #docker build -t kesav38/mvn_image:${{ github.sha }} . 
        #trivy image  kesav38/mvn_image:${{ github.sha }}
        #docker login -u $Username -p $passwd
        #docker push kesav38/mvn_image:${{ github.sha }}
      env: 
        Username: ${{ secrets.DOCKER_USERNAME }}  #docker credentials to push to docker registry
        passwd: ${{ secrets.DOCKER_PASSWD }}
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REPO_URL= ${{ secrets.ECR_REPO_URL }}
      run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REPO_URL/mvn_image:${{ github.sha }}  .
          docker push $ECR_REPO_URL/mvn_image:${{ github.sha }}
         # echo "image=$ECR_REPO_URL/mvn_image:${{ github.sha }}" >> $GITHUB_OUTPUT
    
   # - name: push to ECR
    #  run: |
     #  docker push ${{secrets.ECR_REPO_URL}}/mvn_image:${{ github.sha }}
    #- name: Run Trivy vulnerability scanner
     # uses: aquasecurity/trivy-action@master
     # with:
      #    image-ref: 'kesav38/mvn_image:${{ github.sha }}'
       #   format: 'table'
        #  exit-code: '1'
         # ignore-unfixed: true
          #vuln-type: 'os,library'
          #severity: 'LOW'
